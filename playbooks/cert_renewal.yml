---
# automates step 1 of https://github.com/pulibrary/pul-the-hard-way/blob/main/services/create_ssl_certs.md
# You must pass two variables and you can pass a third if you need it:
# 1. Pass the first element of the FQDN as '-e host_name=value'
# for example: '-e host_name=fun' would generate a cert for fun.princeton.edu
# 2. Pass the path of the directory on your local machine the key and cert should end up in
# with no trailing slash
# for example: '-e cert_path=/home/foo/ssl_certs'
# 3. If your cert needs one or more Subject Alt Names, pass a third variable for those
# for example: "-e SAN_name='DNS:altname.princeton.edu,DNS:otheraltname.princeton.edu'"
#
# Full example command:
# ansible-playbook playbooks/cert_renewal.yml -e host_name=new_site -e cert_path=/home/myuser/ssl_certs -e SAN_name='DNS:new_site1.princeton.edu'
#
# once you have the private key and CSR, follow the rest of the procedure documented on
# https://github.com/pulibrary/pul-the-hard-way/blob/main/services/create_ssl_certs.md
#
- name: Generate a new cert and key
  hosts: localhost
  tasks:
  - name: Generate a new private key
    openssl_privatekey:
      path: "{{ cert_path }}/{{ host_name }}_princeton_edu_priv.key"
      size: 2048
      type: RSA
    register: new_key

  - name: Generate CSR
    community.crypto.openssl_csr:
      path: "{{ cert_path }}/{{ host_name }}_princeton_edu.csr"
      privatekey_path: "{{ new_key.filename }}"
      common_name: "{{ host_name }}.princeton.edu"
      country_name: US
      state_or_province_name: "New Jersey"
      locality_name: Princeton
      email_address: lsupport@princeton.edu
      organization_name: "The Trustees of Princeton University"
      organizational_unit_name: OIT
      subject_alt_name: "{{ SAN_name | default(omit) }}"
    register: host_name_csr

# This is a first approximation of automating the next step in cert renewals
# We will need an API account to connect to the Princeton ServiceNow installation
# and we will need the data field names for these four fields in the existing manual form:
# Certificate Signing Request
# Is this a SAN Certificate?
# Webserver Software
# Additional Comments

  - name: if a SAN_name is defined, set san_cert to true
    ansible.builtin.set_fact:
      san_cert: yes
    when: SAN_name is defined

  - name: Create the ServiceNow Requested Item for a new SSL cert
    servicenow.servicenow.snow_record:
      state: present
      table: requested_item
      username: "{{ snow_username }}"
      password: "{{ vault_snow_password }}"
      instance: "{{ snow_instance }}"
      data:
# not sure what standard (non-custom) fields we need here
# these are two examples from a blog post
#        severity: "{{ sn_severity }}"
#        priority: "{{ sn_priority }}"
        short_description: "Allow website creators to request SSL certificate."
        csr: "{{ host_name_csr.text }}" # check the JSON here!
        is_san_cert: "{{ san_cert | default 'no' }}"
        web_software: "Apache2 and Nginx"
# Ask OIT how they use this field.
# I discovered that some library sites don't run on apache, but I have always put "apache2 and nginx" here
    register: ssl_ritm

  - name: look at new snow_record
    debug:
      var: ssl_ritm.record

# We could also just automate the cert renewal itself
# either in addition to, or instead of, the ServiceNow task
# something like this:
  - name: Generate an OpenSSL certificate signed with PU's CA certificate
    openssl_certificate:
      path: /path/to/crt/princeton.edu.crt
      csr_path: "{{ host_name_csr.text }}" # check the JSON here!
      ownca_path: /path/to/ssl/crt/princeton.edu_CA.crt
      ownca_privatekey_path: /path/to/ssl/private/princeton.edu_CA.pem
      provider: ownca
    register: renewed_cert
